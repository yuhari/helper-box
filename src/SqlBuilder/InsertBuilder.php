<?php
/**
 *
 * The content is generated by using TextMate, and edited by yuhari.
 *
 *
 * insert sql builder .
 * not support the `select ... into ...` clause .
 *
 * @author 	   yuhari
 * @maintainer yuhari
 * @version    1.0.0
 * @modified   2018/07/26 11:00:26
 *
 */
namespace box\SqlBuilder ;

class InsertBuilder extends AbstractBuilder {
	
	// ignore into or not 
	protected $ignore = false ;
	
	// into table
	protected $table ;
	
	// into fields .
	protected $fields = array() ;
	
	// insert values
	protected $values = array() ;
	//value is subselect
	protected $value_sub_select = false ;
	
	// duplicate 
	protected $duplicate = array() ;
	// sub query clause not need alias .
	protected $sub_need_alias = false ;
	
	/**
	 * construct a `insert` sql string . 
	 *
	 * @param  default
	 * @return string
	 */
	public function getSqlString() {
		$clause = 'INSERT ' 
			. $this->buildInto() 
			. $this->buildTable() 
			. $this->buildFields() 
			. $this->buildValues() 
			. $this->buildDuplicate() ;
		
		return $clause ;
	}
	
	/**
	 * reset clause 
	 *
	 * @param  default
	 * @return $this
	 */
	public function reset() {
		$this->ignore = false ;
		$this->table = null ;
		$this->fields = array() ;
		$this->values = array() ;
		$this->value_sub_select = false ;
		$this->duplicate = array() ;
		
		return $this ;
	}
	
	/**
	 * insert ignore into
	 *
	 * @param  default
	 * @return $this
	 */
	public function ignore() {
		$this->ignore = true ;
		
		return $this ;
	}
	
	/**
	 * add a into-table clause .
	 *
	 * @param  string $table
	 * @return $this
	 */
	public function in($table) {
		$this->table = $table ;
		
		return $this ;
	}
	
	/**
	 * add a fields clause .
	 *
	 * @param  array | string $spec
	 * @return $this
	 */
	public function fields($spec) {
		if (is_string($spec)) {
			$this->fields = explode(',' , $spec) ;
		}else{
			$this->fields = $spec ;
		}
		
		return $this ;
	}
	
	/**
	 * add a insert-value clause .
	 *
	 * @param  boolean $multi , is multiple 
	 * @param  array | string | SelectBuilder $spec
	 * @return $this
	 */
	public function insert($multi, $spec = array(), array $bind_values = array()) {
		
		if ($multi !== false && $multi !== true) {
			$bind_values = $spec ;
			$spec = $multi ;
			$multi = false ;
		}
		
		if ($spec instanceof SelectBuilder) {
			if (!$this->value_sub_select) {
				$this->value_sub_select = true ;
				$spec = $this->getSubQueryString($spec) ;
				$this->values[] = "$spec" ;
			}
		}elseif(is_array($spec) && $multi) {
			foreach($spec as $v) {
				$this->addValue($v, $bind_values) ;
			}	
		}else{
			$this->addValue($spec, $bind_values) ;
		}
		
		return $this ;
	}
	
	/**
	 * add a single `value` clause .
	 *
	 * @param  string | array , $spec
	 * @return void
	 */
	protected function addValue($spec, &$bind_values) {
		if (is_array($spec)) {
			$spec = implode(', ', $spec) ;
		}
		
		$clause = $this->rebuildCondAndValues($spec, $bind_values) ;
		$this->values[] = "($clause)" ;
	}
	
	/**
	 * on duplicate key update
	 *
	 * @param  default
	 * @return $this
	 */
	public function duplicate(array $spec = array()) {
		foreach($spec as $k => $v) {
			if (is_string($k)) {
				// field => value
				$this->duplicate["`$k`"] = $v ;
			}else{
				// field => values(field)
				$this->duplicate["`$v`"] = "VALUES(`$v`)" ;
			}
		}
		return $this ;
	}
	
	/**
	 * build a `into` flag clause.
	 *
	 * @param  default
	 * @return string
	 */
	protected function buildInto() {
		return $this->ignore ? 'IGNORE INTO ' : 'INTO ' ;
	}
	
	/**
	 * build table string
	 *
	 * @param  default
	 * @return string
	 */
	protected function buildTable() {
		return "`{$this->table}` " ;
	}
	
	/**
	 * build fields string
	 *
	 * @param  default
	 * @return string
	 */
	protected function buildFields() {
		if (empty($this->fields)) {
			return '' ;
		}
		
		array_walk($this->fields , function(&$v){
			$v = trim($v) ;
		}) ;
		
		$clause = implode("`,`", $this->fields) ;
		
		return "(`$clause`) " ;
	}
	
	/**
	 * build values' string.
	 *
	 * @param  default
	 * @return string
	 */
	protected function buildValues() {
		$clause = '' ;
		if (!$this->value_sub_select) {
			$clause = "VALUES " ;
		}
		
		$clause .= implode(',' , $this->values) ;
		return "$clause " ;
	}
	
	/**
	 * build update string.
	 *
	 * @param  default
	 * @return string
	 */
	protected function buildDuplicate() {
		$clause = '' ;
		
		if (!empty($this->duplicate)) {
			$clause .= "ON DUPLICATE KEY UPDATE " ;
			
			$t = array() ;
			foreach($this->duplicate as $k => $v) {
				$t[] = "$k=$v" ;
			}
			
			$clause .= implode(', ', $t) ;
		}
		
		return $clause ;
	}
}
