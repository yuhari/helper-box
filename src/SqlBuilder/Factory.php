<?php
/**
 *
 * The content is generated by using TextMate, and edited by yuhari.
 *
 *
 * sql builder factory
 *
 *
 * @author 	   yuhari
 * @maintainer yuhari
 * @version    1.0.0
 * @modified   2018/07/26 17:20:50
 *
 */
namespace box\SqlBuilder ;


class Factory {
	
	//builder instance
	protected $builder = null ;
	//realized builder
	private static $realized = array('select', 'delete', 'insert', 'update') ;
	// class pool
	private static $class_pool = array() ;
	
	public function __construct($field) {
		$this->switch($field) ;
	}
	
	public function __call($name, $args) {
		if (is_callable(array($this->builder, $name))) {
			return call_user_func_array(array($this->builder, $name), $args) ;
		}
		
		return null ;
	}
	
	/**
	 * get a builder
	 *
	 * @param  default
	 * @return SqlBuilder 
	 */
	public function getBuilder() {
		return $this->builder ;
	}
	
	/**
	 * switch builder .
	 *
	 * @param  string $field , means className 
	 * @return $this
	 */
	public function switch($field) {
		if (in_array(strtolower($field), self::$realized)) {
			// built-in builder .
			$className = '\SqlBuilder\\' . ucfirst(strtolower($field)) . 'Builder' ;
		} elseif(class_exists($field)) {
			// yourself builder
			$className = $field ;
		}
		
		if (isset(self::$class_pool[$className])) {
			$c = self::$class_pool[$className] ;			
			$c->reset() ;

			$this->builder = clone $c ;
		} else {
			$c = new $className ;
			if ($c instanceof \SqlBuilder\AbstractBuilder) {
				self::$class_pool[$className] = $c ;
				
				$this->builder = $c ;			
			}else{
				$this->builder = null ;
			}
		}
		
		return $this ;
	}
	
	/**
	 * print sql string
	 *
	 * @param  default
	 * @return string
	 */
	public function sqlSnap() {
		if ($this->builder) {
			return $this->builder->getSqlString() ;
		}
		
		return '' ;
	}
}