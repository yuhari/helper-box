<?php
/**
 *
 * The content is generated by using TextMate, and edited by yuhari.
 *
 *
 * 下载启动
 *
 *
 * @author 	   yuhari
 * @maintainer yuhari
 * @version    1.0.0
 * @modified   2019/07/27 23:21:19
 *
 */
namespace box\Downloader ;

use Data\TaskProgress ;
use Data\TaskProgress\Record as TaskRecord ;

class Launcher {
	// 下载器
	protected $download_helper ;
	
	// 当前任务数量
	protected $task_cnt = 0 ;
	// 任务状态
	protected static $stat_map = [
		0 => '未知',
		1 => '未开始',
		2 => '进行中',
		3 => '已完成',
		4 => '暂停中',
		5 => '已取消' ,
	] ;
	
	public function __construct() {
		
		$this->download_helper = new DownloadHelper ;

	}
	
	// 开始或继续下载
	public function start($cond) {
		
		$records = $this->getTasks($cond) ;
		
		if (empty($records)) {
			$record = new TaskRecord() ;
			$this->setTask($record, $cond) ;
			
			$this->download_helper->handle($record) ;
		} else {
			$this->download_helper->handle($records) ;
		}
	}
	
	// 暂停下载
	public function pause($cond) {
		$records = $this->getTasks($cond) ;
		
		if (!empty($records)) {
			$this->download_helper->handle($records, 'pause') ;
		}
	}
	
	// 取消下载
	public function cancel($cond) {
		$records = $this->getTasks($cond) ;
		
		if (!empty($records)) {
			$this->download_helper->handle($records, 'cancel') ;
		}
	}
	
	// 显示下载任务列表
	public function list($stat = null) {
		
		$cond = [] ;
		if ($stat) {
			$cond['flag'] = $stat ;
		}
		
		$records = $this->getTasks($cond) ;
				
		$this->showTask($records) ;
	}
	
	// 更新任务状态
	protected function setTask(TaskRecord $record, $cond) {
		
		foreach($cond as $k => $v) {
			
			$call = [$record, 'set' . ucfirst($k)] ;
			if (is_callable($call)) {
				call_user_func_array($call) ;
			}
		}
		
		return $record ;
	}
	
	// 获取任务列表
	protected function getTasks($cond = []) {
		
		$records = (new TaskProgress())->getRecords() ;
		
		$list = [] ;
		foreach($records as $record) {
			$got = true ;
			
			foreach($cond as $k => $v) {
				$call = [$record, 'get' . ucfirst($k)] ;
				if (is_callable($call)) {
					$t = call_user_func_array($call) ;
					
					if ($v != $t) {
						$got = false ;
						break ;
					}
				}
			}
			
			if ($got) {
				array_push($list, $record) ;
			}
		}
		
		return $list ;
	}
	
	// 输出任务列表
	protected function showTask($records) {
		
		if (!$this->task_cnt) {
			echo sprintf("%s\t%s\t%s\t%s\t%s\t%s\t%s\n", '序号', '标签', '大小','进度', '状态','存储文件', '资源链接') ;
		}
		
		foreach($records as $record) {
			$this->task_cnt ++ ;
			
			$tag = $this->getTag() ;
			$size = static::humanSize($this->getSize()) ;
			$prog = round($this->getCursor() / $this->getSize() * 100, 1) ;
			$stat = static::$stat_map[$this->getFlag()] ;
			$path = realpath($this->getSaveDir()) . '/' . $this->getSaveName() ;
			
			echo sprintf("%2d.\t%s\t%s\t%s\t%s\t%s\t%s\n", $this->task_cnt, $tag, $size, $prog.'%', $stat, $path, $this->getUrl()) ;
		}
	}
	
	// 文件大小显示
	protected static function humanSize($size) {
    	$units = ['B', 'KB', 'MB', 'GB'];
    	foreach ($units as $unit) {
        	if ($size > 1024)
            	$size /= 1024;
        	else break;
    	}
    	return round($size, 2) . $unit;
	}
}
