<?php
/**
 *
 * The content is generated by using TextMate, and edited by yuhari.
 *
 *
 * Download Helper
 *
 *
 * @author 	   yuhari
 * @maintainer yuhari
 * @version    1.0.0
 * @modified   2019/07/25 17:24:29
 *
 */
namespace box\Downloader ;

use GuzzleHttp\Client ;

class Helper {
	
	// 下载资源路径
	protected $src_url ;
	// 下载目录  
	protected $dst_dir ;
	// 是否处于下载过程中
	protected $is_downloading = false ;
	// 下载任务队列
	protected $worker_queue ;
	protected $worker_cnt = 16 ;
	// 下载进程池
	protected $worker_pool ;
	// 请求客户端
	protected $client ;
	// 已下载文件大小
	protected $hasDownloadSize = 0 ;
	// 下载文件大小
	protected $fileSize ;
	// 下载文件名称
	protected $fileName ;
	// 已经处理的坐标
	protected $handlePosi ;
	// 下载速度
	protected $speed = [] ;
	
	public function __construct($url, $dir) {
		
		$this->src_url = $url ;
		$this->dst_dir = $dir ;
	}
	
	public function start() {
		
		if ($this->is_downloading) {
			die("It's downloading!\n") ;
		}
		
		$this->worker_queue 	= new \SplQueue() ;
		$this->is_downloading 	= true ;
		
		$this->client = new Client([
			'headers' => [
				"Accept"           => "application/json, text/javascript, text/html, */*; q=0.01",
				"Accept-Encoding"  => "gzip, deflate, sdch, br",
				"Accept-Language"  => "en-US,en;q=0.8,zh-CN;q=0.6,zh;q=0.4,zh-TW;q=0.2",
				"Referer"          => "http://pan.baidu.com/disk/home",
				"X-Requested-With" => "XMLHttpRequest",
				"User-Agent"       => "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.142 Safari/537.36",
				"Connection"       => "keep-alive",
				// https
				"Upgrade-Insecure-Requests" => 1
			]
		]) ;
		
		// 将下载任务分离成多个子任务
		//swoole_set_process_name('download-master') ;
		
		for ($i = 0; $i < $this->worker_cnt; $i ++) {
			
			$worker = $this->createWorker($i) ;
			$this->worker_pool[$i] = $worker ;
			
			\swoole_event_add($worker->pipe, function($v) use($worker) {
				$data = $worker->read() ;
				$data = unserialize($data) ;
				
				$this->handleMessage($worker, $data['type'], $data['data']) ;
			}) ;
			
			$worker->start() ;
			$this->worker_queue->enqueue($worker) ;
		}
		
		\swoole_process::signal(SIGCHLD, function($sig) {
			$c = 0 ;
			while($ret = \swoole_process::wait(false)) {
                #echo "child process exited, PID={$ret['pid']}\n";
				$c ++ ;
				if ($c == count($this->worker_pool)) exit() ;
			}
		}) ;
		
		$this->initDownload() ;
	}
	
	// 初始化下载
	protected function initDownload() {
		$i = 0 ;
		do {
			echo "Request Uri " . ($i ? $i : '') . ": " . $this->src_url . "\n" ;
			$i ++ ;
			$resp = $this->client->request('GET', $this->src_url, [
				'stream' 		=> true,
				'read_timeout' 	=> 10 ,
			]) ;
			
			if ($location = $resp->getHeader('Location')) {
				$this->src_url = $location ;
			}
			
		} while(in_array($resp->getStatusCode(), [301, 302])) ;
		
		if ($resp) {
			if (!$resp->getHeader('Content-Disposition')) {
//				 die("Not a file download url\n") ; 
			}
		}
		
		$length = $resp->getHeader('Content-Length') ;
		$this->fileSize = $length ? intval($length[0]) : 10 * 1024 * 1024 ;
		$fname = @$resp->getHeader('Content-Disposition')[0] ;

		if ($fname) {
			$fname = substr($fname, stripos($fname, 'filename=') + 9) ;
			$fname = urldecode($fname) ;
		} else {
			$fname = 'UP0177-PCSE00639_00-FIGHTINGCLIMAX00_bg_1_f1af3b10f32ccfe1305ea99e9572d8872d6e1095.pkg' ;
		}
		$this->fileName = realpath($this->dst_dir) .'/' . trim($fname, '"') ;
		
		echo sprintf("文件：%s, 大小：%s MB\n", $this->fileName, round($this->fileSize/1024/1024, 2)) ;
		
		file_put_contents($this->fileName, '') ;
		
		echo date('Y-m-d H:i:s') . ": 开始下载...\n" ;
		// 启动下载
		$this->download() ;
	}
	
	// 下载
	protected function download() {
		
		while ($this->handlePosi < $this->fileSize && $this->worker_queue->count()) {
			$worker = $this->worker_queue->dequeue() ;
			if ($worker) {
				$this->downloadSegment($worker) ;
			}
		}
	}
	
	// 分段下载
	protected function downloadSegment($worker) {
		$p = $this->fileSize >= $this->worker_cnt * 1024 * 1024 ? 1 : 0.25 ;
		$size = $p * 1024 * 1024 ;
		
		$worker->write(serialize([
			'type' => 'new-segment' ,
			'data' => [
				'url' 	=> $this->src_url ,
				'file' 	=> $this->fileName ,
				'start' => $this->handlePosi ,
				'length'=> min($size, $this->fileSize - $this->handlePosi) ,
			]
		])) ;
			
		$this->handlePosi += $size ;
	}
	
	// 下载信息数据处理
	protected function handleMessage($worker, $type, $data) {
		
		if (is_callable(array($this, 'on' . ucfirst($type)))) {
			call_user_func_array([$this, 'on' . ucfirst($type)], [$worker, $data]) ;
		} 
	}
	
	public static function humanSize($size) {
    	$units = ['B', 'KB', 'MB', 'GB'];
    	foreach ($units as $unit) {
        	if ($size > 1024)
            	$size /= 1024;
        	else break;
    	}
    	return round($size, 2) . $unit;
	}

	// on Range
	protected function onRange($worker, $data) {
				
		$this->hasDownloadSize += $data ;
		$percent = round($this->hasDownloadSize / $this->fileSize * 100 , 2) ;
			
		$lastTime = 0 ;
		$currentTime = time() ;
		
		@(int)$this->speed[$currentTime] += $data ;
		
		if ($currentTime > $lastTime) {
			
			$lastTime = $currentTime ;
			foreach($this->speed as $time => $v) {
				if ($time < $currentTime - 5) {
					unset($this->speed[$time]) ;
				}
			}
		}

		$speed = array_sum($this->speed) / count($this->speed);
		
		echo "\b" ;
        echo "\r\033[2K" . sprintf("已下载: %s, %s ; 当前速度：　%s/s", static::humanSize($this->hasDownloadSize), $percent, static::humanSize($speed));
	}
	
	// on TaskFinished
	protected function onTaskFinished($worker, $data) {
		
		if ($this->handlePosi < $this->fileSize) {
			$this->downloadSegment($worker) ;
		} else {
			
			$this->worker_queue->enqueue($worker) ;
			if ($this->worker_queue->count() == count($this->worker_pool)) {
				echo "\nFinish Download File.\n" ;
				
				echo date('Y-m-d H:i:s') . ": 下载完成！\n" ;
				
				foreach($this->worker_pool as $w) {
					$w->write(serialize([
						'type' => 'exit' ,
						'data' => ''
					])) ;
				}
			}
		}
		
	}
	
	// 创建子工作任务
	protected function createWorker($index) {
		
		$worker = new \swoole_process(function(\swoole_process $worker) use($index) {
			
			//swoole_set_process_name("download-worker_" . $index) ;
            #echo sprintf('worker:%s, pid:%s', $index, posix_getpid()) . PHP_EOL;
			$downloader = null ;
			
			\swoole_event_add($worker->pipe, function($v) use($worker, &$downloader) {
				$data = $worker->read() ;
				$data = unserialize($data) ;
				
				$type = $data['type']; $data = $data['data'] ;
				
				if ($type == 'new-segment') {
					
					$downloader = new Downloader($worker, $this->client, $data['url'], $data['file'], $data['start'], $data['length']);
					$downloader->download();
					
					$worker->write(serialize([
					    'type' => 'taskFinished',
					    'data' => ''
					]));
					
					$downloader = null;
					return;
				}
				
				if ($type == 'exit') exit(0) ;
			}) ;
		}, false , 2) ;
		
		return $worker ;
	}
}
