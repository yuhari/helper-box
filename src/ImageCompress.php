<?php
/**
 *
 * The content is generated by using TextMate, and edited by yuhari.
 *
 *
 * 图片缩放、压缩类
 *
 *
 * @author 	   yuhari
 * @maintainer yuhari
 * @version    1.0.0
 * @modified   2018/08/29 09:42:21
 *
 */
namespace box ;

class ImageCompress {
	// 原始图片路径
	private $src ;
	// 当前图片
	private $image ;
	
	private $imageType ;
	// 缩放百分比
	private $percent ;
	
	public function __construct($src, $percent = null) {
		$this->src = $src ;
		$this->percent = $percent ;
	}
	
	/**
	 * 压缩操作
	 *
	 * @param  $to 压缩后存储路径
	 * @return void
	 */
	public function compress($to = null, $percent = null) {
		if (!empty($percent)) {
			$this->percent = $percent ;
		}
		
		$this->scaleImage() ;
		
		return $this->saveImage($to) ;
	}
	
	/**
	 * 缩放压缩图片
	 *
	 * @param  default
	 * @return void
	 */
	private function scaleImage() {
		if (file_exists($this->src)) {
			$stat = getimagesize($this->src) ;
			if ($stat && $stat[2] < 4) {
				$this->imageType = image_type_to_extension($stat[2], false) ;
				
				if (empty($this->percent)) {
					$p1 = $stat[0] > 1000 ? 1000 / $stat[0] * 100 : 100 ;
					$p2 = $stat[1] > 1000 ? 1000 / $stat[1] * 100 : 100 ;
					$this->percent = min($p1, $p2) ;
				}
				
				$w = $stat[0] * $this->percent / 100 ;
				$h = $stat[1] * $this->percent / 100 ;
				
				$func = "imagecreatefrom" . $this->imageType ;
				// 原始图片
				$this->image = $func($this->src) ;
				
				// 缩放拷贝新图
				$to_image = imagecreatetruecolor($w, $h) ;
				imagecopyresampled($to_image, $this->image, 0,0,0,0, $w, $h, $stat[0], $stat[1]) ;
				imagedestroy($this->image) ;
				
				$this->image = $to_image ;
			}
		}
	}
	
	/**
	 * 将当前图片对象保存
	 *
	 * @param  default
	 * @return void
	 */
	private function saveImage($dst) {
		if (empty($dst)) {
			$func = "image" . $this->imageType ;
			ob_start() ;
			$func($this->image) ;
			$r = ob_get_clean() ;
			return $r ;
		} else {
			$func = "image" . $this->imageType ;
			return $func($this->image, $dst) ;
		}
	}
}
